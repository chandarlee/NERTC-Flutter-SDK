// Autogenerated from Pigeon (v0.1.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
    NSDictionary *errorDict = (NSDictionary *)[NSNull null];
    if (error) {
        errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
                     (error.code ? error.code : [NSNull null]), @"code",
                     (error.message ? error.message : [NSNull null]), @"message",
                     (error.details ? error.details : [NSNull null]), @"details",
                     nil];
    }
    return [NSDictionary dictionaryWithObjectsAndKeys:
            (result ? result : [NSNull null]), @"result",
            errorDict, @"error",
            nil];
}

@interface FLTIntValue ()
+(FLTIntValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTStartAudioMixingRequest ()
+(FLTStartAudioMixingRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetVideoRendererMirrorRequest ()
+(FLTSetVideoRendererMirrorRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetupRemoteVideoRendererRequest ()
+(FLTSetupRemoteVideoRendererRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTBoolValue ()
+(FLTBoolValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTDoubleValue ()
+(FLTDoubleValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetCameraFocusPositionRequest ()
+(FLTSetCameraFocusPositionRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTEnableEarbackRequest ()
+(FLTEnableEarbackRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTPlayEffectRequest ()
+(FLTPlayEffectRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetEffectSendVolumeRequest ()
+(FLTSetEffectSendVolumeRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetEffectPlaybackVolumeRequest ()
+(FLTSetEffectPlaybackVolumeRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTCreateEngineRequest ()
+(FLTCreateEngineRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTJoinChannelRequest ()
+(FLTJoinChannelRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSubscribeRemoteAudioStreamRequest ()
+(FLTSubscribeRemoteAudioStreamRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetAudioProfileRequest ()
+(FLTSetAudioProfileRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetLocalVideoConfigRequest ()
+(FLTSetLocalVideoConfigRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSubscribeRemoteVideoStreamRequest ()
+(FLTSubscribeRemoteVideoStreamRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTEnableAudioVolumeIndicationRequest ()
+(FLTEnableAudioVolumeIndicationRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTAddOrUpdateLiveStreamTaskRequest ()
+(FLTAddOrUpdateLiveStreamTaskRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTDeleteLiveStreamTaskRequest ()
+(FLTDeleteLiveStreamTaskRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FLTIntValue
+(FLTIntValue*)fromMap:(NSDictionary*)dict {
    FLTIntValue* result = [[FLTIntValue alloc] init];
    result.value = dict[@"value"];
    if ((NSNull *)result.value == [NSNull null]) {
        result.value = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation FLTStartAudioMixingRequest
+(FLTStartAudioMixingRequest*)fromMap:(NSDictionary*)dict {
    FLTStartAudioMixingRequest* result = [[FLTStartAudioMixingRequest alloc] init];
    result.path = dict[@"path"];
    if ((NSNull *)result.path == [NSNull null]) {
        result.path = nil;
    }
    result.loopCount = dict[@"loopCount"];
    if ((NSNull *)result.loopCount == [NSNull null]) {
        result.loopCount = nil;
    }
    result.sendEnabled = dict[@"sendEnabled"];
    if ((NSNull *)result.sendEnabled == [NSNull null]) {
        result.sendEnabled = nil;
    }
    result.sendVolume = dict[@"sendVolume"];
    if ((NSNull *)result.sendVolume == [NSNull null]) {
        result.sendVolume = nil;
    }
    result.playbackEnabled = dict[@"playbackEnabled"];
    if ((NSNull *)result.playbackEnabled == [NSNull null]) {
        result.playbackEnabled = nil;
    }
    result.playbackVolume = dict[@"playbackVolume"];
    if ((NSNull *)result.playbackVolume == [NSNull null]) {
        result.playbackVolume = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.path ? self.path : [NSNull null]), @"path", (self.loopCount ? self.loopCount : [NSNull null]), @"loopCount", (self.sendEnabled ? self.sendEnabled : [NSNull null]), @"sendEnabled", (self.sendVolume ? self.sendVolume : [NSNull null]), @"sendVolume", (self.playbackEnabled ? self.playbackEnabled : [NSNull null]), @"playbackEnabled", (self.playbackVolume ? self.playbackVolume : [NSNull null]), @"playbackVolume", nil];
}
@end

@implementation FLTSetVideoRendererMirrorRequest
+(FLTSetVideoRendererMirrorRequest*)fromMap:(NSDictionary*)dict {
    FLTSetVideoRendererMirrorRequest* result = [[FLTSetVideoRendererMirrorRequest alloc] init];
    result.textureId = dict[@"textureId"];
    if ((NSNull *)result.textureId == [NSNull null]) {
        result.textureId = nil;
    }
    result.mirror = dict[@"mirror"];
    if ((NSNull *)result.mirror == [NSNull null]) {
        result.mirror = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.mirror ? self.mirror : [NSNull null]), @"mirror", nil];
}
@end

@implementation FLTSetupRemoteVideoRendererRequest
+(FLTSetupRemoteVideoRendererRequest*)fromMap:(NSDictionary*)dict {
    FLTSetupRemoteVideoRendererRequest* result = [[FLTSetupRemoteVideoRendererRequest alloc] init];
    result.uid = dict[@"uid"];
    if ((NSNull *)result.uid == [NSNull null]) {
        result.uid = nil;
    }
    result.textureId = dict[@"textureId"];
    if ((NSNull *)result.textureId == [NSNull null]) {
        result.textureId = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.textureId ? self.textureId : [NSNull null]), @"textureId", nil];
}
@end

@implementation FLTBoolValue
+(FLTBoolValue*)fromMap:(NSDictionary*)dict {
    FLTBoolValue* result = [[FLTBoolValue alloc] init];
    result.value = dict[@"value"];
    if ((NSNull *)result.value == [NSNull null]) {
        result.value = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation FLTDoubleValue
+(FLTDoubleValue*)fromMap:(NSDictionary*)dict {
    FLTDoubleValue* result = [[FLTDoubleValue alloc] init];
    result.value = dict[@"value"];
    if ((NSNull *)result.value == [NSNull null]) {
        result.value = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation FLTSetCameraFocusPositionRequest
+(FLTSetCameraFocusPositionRequest*)fromMap:(NSDictionary*)dict {
    FLTSetCameraFocusPositionRequest* result = [[FLTSetCameraFocusPositionRequest alloc] init];
    result.x = dict[@"x"];
    if ((NSNull *)result.x == [NSNull null]) {
        result.x = nil;
    }
    result.y = dict[@"y"];
    if ((NSNull *)result.y == [NSNull null]) {
        result.y = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.x ? self.x : [NSNull null]), @"x", (self.y ? self.y : [NSNull null]), @"y", nil];
}
@end

@implementation FLTEnableEarbackRequest
+(FLTEnableEarbackRequest*)fromMap:(NSDictionary*)dict {
    FLTEnableEarbackRequest* result = [[FLTEnableEarbackRequest alloc] init];
    result.enabled = dict[@"enabled"];
    if ((NSNull *)result.enabled == [NSNull null]) {
        result.enabled = nil;
    }
    result.volume = dict[@"volume"];
    if ((NSNull *)result.volume == [NSNull null]) {
        result.volume = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.enabled ? self.enabled : [NSNull null]), @"enabled", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation FLTPlayEffectRequest
+(FLTPlayEffectRequest*)fromMap:(NSDictionary*)dict {
    FLTPlayEffectRequest* result = [[FLTPlayEffectRequest alloc] init];
    result.effectId = dict[@"effectId"];
    if ((NSNull *)result.effectId == [NSNull null]) {
        result.effectId = nil;
    }
    result.path = dict[@"path"];
    if ((NSNull *)result.path == [NSNull null]) {
        result.path = nil;
    }
    result.loopCount = dict[@"loopCount"];
    if ((NSNull *)result.loopCount == [NSNull null]) {
        result.loopCount = nil;
    }
    result.sendEnabled = dict[@"sendEnabled"];
    if ((NSNull *)result.sendEnabled == [NSNull null]) {
        result.sendEnabled = nil;
    }
    result.sendVolume = dict[@"sendVolume"];
    if ((NSNull *)result.sendVolume == [NSNull null]) {
        result.sendVolume = nil;
    }
    result.playbackEnabled = dict[@"playbackEnabled"];
    if ((NSNull *)result.playbackEnabled == [NSNull null]) {
        result.playbackEnabled = nil;
    }
    result.playbackVolume = dict[@"playbackVolume"];
    if ((NSNull *)result.playbackVolume == [NSNull null]) {
        result.playbackVolume = nil;
    }
    return result;
}
-(NSDictionary*)toMap {
    return [NSDictionary dictionaryWithObjectsAndKeys:(self.effectId ? self.effectId : [NSNull null]), @"effectId", (self.path ? self.path : [NSNull null]), @"path", (self.loopCount ? self.loopCount : [NSNull null]), @"loopCount", (self.sendEnabled ? self.sendEnabled : [NSNull null]), @"sendEnabled", (self.sendVolume ? self.sendVolume : [NSNull null]), @"sendVolume", (self.playbackEnabled ? self.playbackEnabled : [NSNull null]), @"playbackEnabled", (self.playbackVolume ? self.playbackVolume : [NSNull null]), @"playbackVolume", nil];
}
@end

@implementation FLTSetEffectSendVolumeRequest
+(FLTSetEffectSendVolumeRequest*)fromMap:(NSDictionary*)dict {
  FLTSetEffectSendVolumeRequest* result = [[FLTSetEffectSendVolumeRequest alloc] init];
  result.effectId = dict[@"effectId"];
  if ((NSNull *)result.effectId == [NSNull null]) {
    result.effectId = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.effectId ? self.effectId : [NSNull null]), @"effectId", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation FLTSetEffectPlaybackVolumeRequest
+(FLTSetEffectPlaybackVolumeRequest*)fromMap:(NSDictionary*)dict {
  FLTSetEffectPlaybackVolumeRequest* result = [[FLTSetEffectPlaybackVolumeRequest alloc] init];
  result.effectId = dict[@"effectId"];
  if ((NSNull *)result.effectId == [NSNull null]) {
    result.effectId = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.effectId ? self.effectId : [NSNull null]), @"effectId", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation FLTCreateEngineRequest
+(FLTCreateEngineRequest*)fromMap:(NSDictionary*)dict {
  FLTCreateEngineRequest* result = [[FLTCreateEngineRequest alloc] init];
  result.appKey = dict[@"appKey"];
  if ((NSNull *)result.appKey == [NSNull null]) {
    result.appKey = nil;
  }
  result.logDir = dict[@"logDir"];
  if ((NSNull *)result.logDir == [NSNull null]) {
    result.logDir = nil;
  }
  result.logLevel = dict[@"logLevel"];
  if ((NSNull *)result.logLevel == [NSNull null]) {
    result.logLevel = nil;
  }
  result.autoSubscribeAudio = dict[@"autoSubscribeAudio"];
  if ((NSNull *)result.autoSubscribeAudio == [NSNull null]) {
    result.autoSubscribeAudio = nil;
  }
  result.videoEncodeMode = dict[@"videoEncodeMode"];
  if ((NSNull *)result.videoEncodeMode == [NSNull null]) {
    result.videoEncodeMode = nil;
  }
  result.videoDecodeMode = dict[@"videoDecodeMode"];
  if ((NSNull *)result.videoDecodeMode == [NSNull null]) {
    result.videoDecodeMode = nil;
  }
  result.serverRecordAudio = dict[@"serverRecordAudio"];
  if ((NSNull *)result.serverRecordAudio == [NSNull null]) {
    result.serverRecordAudio = nil;
  }
  result.serverRecordVideo = dict[@"serverRecordVideo"];
  if ((NSNull *)result.serverRecordVideo == [NSNull null]) {
    result.serverRecordVideo = nil;
  }
  result.serverRecordMode = dict[@"serverRecordMode"];
  if ((NSNull *)result.serverRecordMode == [NSNull null]) {
    result.serverRecordMode = nil;
  }
  result.serverRecordSpeaker = dict[@"serverRecordSpeaker"];
  if ((NSNull *)result.serverRecordSpeaker == [NSNull null]) {
    result.serverRecordSpeaker = nil;
  }
  result.publishSelfStream = dict[@"publishSelfStream"];
  if ((NSNull *)result.publishSelfStream == [NSNull null]) {
    result.publishSelfStream = nil;
  }
  result.videoCaptureObserver = dict[@"videoCaptureObserver"];
  if ((NSNull *)result.videoCaptureObserver == [NSNull null]) {
    result.videoCaptureObserver = nil;
  }
  result.videoSendMode = dict[@"videoSendMode"];
  if ((NSNull *)result.videoSendMode == [NSNull null]) {
    result.videoSendMode = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.appKey ? self.appKey : [NSNull null]), @"appKey", (self.logDir ? self.logDir : [NSNull null]), @"logDir", (self.logLevel ? self.logLevel : [NSNull null]), @"logLevel", (self.autoSubscribeAudio ? self.autoSubscribeAudio : [NSNull null]), @"autoSubscribeAudio", (self.videoEncodeMode ? self.videoEncodeMode : [NSNull null]), @"videoEncodeMode", (self.videoDecodeMode ? self.videoDecodeMode : [NSNull null]), @"videoDecodeMode", (self.serverRecordAudio ? self.serverRecordAudio : [NSNull null]), @"serverRecordAudio", (self.serverRecordVideo ? self.serverRecordVideo : [NSNull null]), @"serverRecordVideo", (self.serverRecordMode ? self.serverRecordMode : [NSNull null]), @"serverRecordMode", (self.serverRecordSpeaker ? self.serverRecordSpeaker : [NSNull null]), @"serverRecordSpeaker", (self.publishSelfStream ? self.publishSelfStream : [NSNull null]), @"publishSelfStream", (self.videoCaptureObserver ? self.videoCaptureObserver : [NSNull null]), @"videoCaptureObserver", (self.videoSendMode ? self.videoSendMode : [NSNull null]), @"videoSendMode", nil];
}
@end

@implementation FLTJoinChannelRequest
+(FLTJoinChannelRequest*)fromMap:(NSDictionary*)dict {
  FLTJoinChannelRequest* result = [[FLTJoinChannelRequest alloc] init];
  result.token = dict[@"token"];
  if ((NSNull *)result.token == [NSNull null]) {
    result.token = nil;
  }
  result.channelName = dict[@"channelName"];
  if ((NSNull *)result.channelName == [NSNull null]) {
    result.channelName = nil;
  }
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.token ? self.token : [NSNull null]), @"token", (self.channelName ? self.channelName : [NSNull null]), @"channelName", (self.uid ? self.uid : [NSNull null]), @"uid", nil];
}
@end

@implementation FLTSubscribeRemoteAudioStreamRequest
+(FLTSubscribeRemoteAudioStreamRequest*)fromMap:(NSDictionary*)dict {
  FLTSubscribeRemoteAudioStreamRequest* result = [[FLTSubscribeRemoteAudioStreamRequest alloc] init];
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  result.subscribe = dict[@"subscribe"];
  if ((NSNull *)result.subscribe == [NSNull null]) {
    result.subscribe = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.subscribe ? self.subscribe : [NSNull null]), @"subscribe", nil];
}
@end

@implementation FLTSetAudioProfileRequest
+(FLTSetAudioProfileRequest*)fromMap:(NSDictionary*)dict {
  FLTSetAudioProfileRequest* result = [[FLTSetAudioProfileRequest alloc] init];
  result.profile = dict[@"profile"];
  if ((NSNull *)result.profile == [NSNull null]) {
    result.profile = nil;
  }
  result.scenario = dict[@"scenario"];
  if ((NSNull *)result.scenario == [NSNull null]) {
    result.scenario = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.profile ? self.profile : [NSNull null]), @"profile", (self.scenario ? self.scenario : [NSNull null]), @"scenario", nil];
}
@end

@implementation FLTSetLocalVideoConfigRequest
+(FLTSetLocalVideoConfigRequest*)fromMap:(NSDictionary*)dict {
  FLTSetLocalVideoConfigRequest* result = [[FLTSetLocalVideoConfigRequest alloc] init];
  result.videoProfile = dict[@"videoProfile"];
  if ((NSNull *)result.videoProfile == [NSNull null]) {
    result.videoProfile = nil;
  }
  result.videoCropMode = dict[@"videoCropMode"];
  if ((NSNull *)result.videoCropMode == [NSNull null]) {
    result.videoCropMode = nil;
  }
  result.frontCamera = dict[@"frontCamera"];
  if ((NSNull *)result.frontCamera == [NSNull null]) {
    result.frontCamera = nil;
  }
  result.frameRate = dict[@"frameRate"];
  if ((NSNull *)result.frameRate == [NSNull null]) {
    result.frameRate = nil;
  }
  result.minFrameRate = dict[@"minFrameRate"];
  if ((NSNull *)result.minFrameRate == [NSNull null]) {
    result.minFrameRate = nil;
  }
  result.bitrate = dict[@"bitrate"];
  if ((NSNull *)result.bitrate == [NSNull null]) {
    result.bitrate = nil;
  }
  result.minBitrate = dict[@"minBitrate"];
  if ((NSNull *)result.minBitrate == [NSNull null]) {
    result.minBitrate = nil;
  }
  result.degradationPrefer = dict[@"degradationPrefer"];
  if ((NSNull *)result.degradationPrefer == [NSNull null]) {
    result.degradationPrefer = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.videoProfile ? self.videoProfile : [NSNull null]), @"videoProfile", (self.videoCropMode ? self.videoCropMode : [NSNull null]), @"videoCropMode", (self.frontCamera ? self.frontCamera : [NSNull null]), @"frontCamera", (self.frameRate ? self.frameRate : [NSNull null]), @"frameRate", (self.minFrameRate ? self.minFrameRate : [NSNull null]), @"minFrameRate", (self.bitrate ? self.bitrate : [NSNull null]), @"bitrate", (self.minBitrate ? self.minBitrate : [NSNull null]), @"minBitrate", (self.degradationPrefer ? self.degradationPrefer : [NSNull null]), @"degradationPrefer", nil];
}
@end

@implementation FLTSubscribeRemoteVideoStreamRequest
+(FLTSubscribeRemoteVideoStreamRequest*)fromMap:(NSDictionary*)dict {
  FLTSubscribeRemoteVideoStreamRequest* result = [[FLTSubscribeRemoteVideoStreamRequest alloc] init];
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  result.streamType = dict[@"streamType"];
  if ((NSNull *)result.streamType == [NSNull null]) {
    result.streamType = nil;
  }
  result.subscribe = dict[@"subscribe"];
  if ((NSNull *)result.subscribe == [NSNull null]) {
    result.subscribe = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.streamType ? self.streamType : [NSNull null]), @"streamType", (self.subscribe ? self.subscribe : [NSNull null]), @"subscribe", nil];
}
@end

@implementation FLTEnableAudioVolumeIndicationRequest
+(FLTEnableAudioVolumeIndicationRequest*)fromMap:(NSDictionary*)dict {
  FLTEnableAudioVolumeIndicationRequest* result = [[FLTEnableAudioVolumeIndicationRequest alloc] init];
  result.enable = dict[@"enable"];
  if ((NSNull *)result.enable == [NSNull null]) {
    result.enable = nil;
  }
  result.interval = dict[@"interval"];
  if ((NSNull *)result.interval == [NSNull null]) {
    result.interval = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.enable ? self.enable : [NSNull null]), @"enable", (self.interval ? self.interval : [NSNull null]), @"interval", nil];
}
@end

@implementation FLTAddOrUpdateLiveStreamTaskRequest
+(FLTAddOrUpdateLiveStreamTaskRequest*)fromMap:(NSDictionary*)dict {
  FLTAddOrUpdateLiveStreamTaskRequest* result = [[FLTAddOrUpdateLiveStreamTaskRequest alloc] init];
  result.serial = dict[@"serial"];
  if ((NSNull *)result.serial == [NSNull null]) {
    result.serial = nil;
  }
  result.taskId = dict[@"taskId"];
  if ((NSNull *)result.taskId == [NSNull null]) {
    result.taskId = nil;
  }
  result.url = dict[@"url"];
  if ((NSNull *)result.url == [NSNull null]) {
    result.url = nil;
  }
  result.serverRecordEnabled = dict[@"serverRecordEnabled"];
  if ((NSNull *)result.serverRecordEnabled == [NSNull null]) {
    result.serverRecordEnabled = nil;
  }
  result.liveMode = dict[@"liveMode"];
  if ((NSNull *)result.liveMode == [NSNull null]) {
    result.liveMode = nil;
  }
  result.layoutWidth = dict[@"layoutWidth"];
  if ((NSNull *)result.layoutWidth == [NSNull null]) {
    result.layoutWidth = nil;
  }
  result.layoutHeight = dict[@"layoutHeight"];
  if ((NSNull *)result.layoutHeight == [NSNull null]) {
    result.layoutHeight = nil;
  }
  result.layoutBackgroundColor = dict[@"layoutBackgroundColor"];
  if ((NSNull *)result.layoutBackgroundColor == [NSNull null]) {
    result.layoutBackgroundColor = nil;
  }
  result.layoutImageUrl = dict[@"layoutImageUrl"];
  if ((NSNull *)result.layoutImageUrl == [NSNull null]) {
    result.layoutImageUrl = nil;
  }
  result.layoutImageX = dict[@"layoutImageX"];
  if ((NSNull *)result.layoutImageX == [NSNull null]) {
    result.layoutImageX = nil;
  }
  result.layoutImageY = dict[@"layoutImageY"];
  if ((NSNull *)result.layoutImageY == [NSNull null]) {
    result.layoutImageY = nil;
  }
  result.layoutImageWidth = dict[@"layoutImageWidth"];
  if ((NSNull *)result.layoutImageWidth == [NSNull null]) {
    result.layoutImageWidth = nil;
  }
  result.layoutImageHeight = dict[@"layoutImageHeight"];
  if ((NSNull *)result.layoutImageHeight == [NSNull null]) {
    result.layoutImageHeight = nil;
  }
  result.layoutUserTranscodingList = dict[@"layoutUserTranscodingList"];
  if ((NSNull *)result.layoutUserTranscodingList == [NSNull null]) {
    result.layoutUserTranscodingList = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.serial ? self.serial : [NSNull null]), @"serial", (self.taskId ? self.taskId : [NSNull null]), @"taskId", (self.url ? self.url : [NSNull null]), @"url", (self.serverRecordEnabled ? self.serverRecordEnabled : [NSNull null]), @"serverRecordEnabled", (self.liveMode ? self.liveMode : [NSNull null]), @"liveMode", (self.layoutWidth ? self.layoutWidth : [NSNull null]), @"layoutWidth", (self.layoutHeight ? self.layoutHeight : [NSNull null]), @"layoutHeight", (self.layoutBackgroundColor ? self.layoutBackgroundColor : [NSNull null]), @"layoutBackgroundColor", (self.layoutImageUrl ? self.layoutImageUrl : [NSNull null]), @"layoutImageUrl", (self.layoutImageX ? self.layoutImageX : [NSNull null]), @"layoutImageX", (self.layoutImageY ? self.layoutImageY : [NSNull null]), @"layoutImageY", (self.layoutImageWidth ? self.layoutImageWidth : [NSNull null]), @"layoutImageWidth", (self.layoutImageHeight ? self.layoutImageHeight : [NSNull null]), @"layoutImageHeight", (self.layoutUserTranscodingList ? self.layoutUserTranscodingList : [NSNull null]), @"layoutUserTranscodingList", nil];
}
@end

@implementation FLTDeleteLiveStreamTaskRequest
+(FLTDeleteLiveStreamTaskRequest*)fromMap:(NSDictionary*)dict {
  FLTDeleteLiveStreamTaskRequest* result = [[FLTDeleteLiveStreamTaskRequest alloc] init];
  result.serial = dict[@"serial"];
  if ((NSNull *)result.serial == [NSNull null]) {
    result.serial = nil;
  }
  result.taskId = dict[@"taskId"];
  if ((NSNull *)result.taskId == [NSNull null]) {
    result.taskId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.serial ? self.serial : [NSNull null]), @"serial", (self.taskId ? self.taskId : [NSNull null]), @"taskId", nil];
}
@end

void FLTAudioMixingApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTAudioMixingApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.setAudioMixingEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api setAudioMixingEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.clearAudioMixingEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api clearAudioMixingEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.startAudioMixing"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTStartAudioMixingRequest *input = [FLTStartAudioMixingRequest fromMap:message];
        FLTIntValue *output = [api startAudioMixing:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.stopAudioMixing"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api stopAudioMixing:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.pauseAudioMixing"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api pauseAudioMixing:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.resumeAudioMixing"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api resumeAudioMixing:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.setAudioMixingSendVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api setAudioMixingSendVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.getAudioMixingSendVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api getAudioMixingSendVolume:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.setAudioMixingPlaybackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api setAudioMixingPlaybackVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.getAudioMixingPlaybackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api getAudioMixingPlaybackVolume:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.getAudioMixingDuration"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api getAudioMixingDuration:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.getAudioMixingCurrentPosition"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api getAudioMixingCurrentPosition:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.setAudioMixingPosition"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api setAudioMixingPosition:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void FLTVideoRendererApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTVideoRendererApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.createVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api createVideoRenderer:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.setMirror"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetVideoRendererMirrorRequest *input = [FLTSetVideoRendererMirrorRequest fromMap:message];
        FLTIntValue *output = [api setMirror:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.setupLocalVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api setupLocalVideoRenderer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.setupRemoteVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetupRemoteVideoRendererRequest *input = [FLTSetupRemoteVideoRendererRequest fromMap:message];
        FLTIntValue *output = [api setupRemoteVideoRenderer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.disposeVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        [api disposeVideoRenderer:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void FLTDeviceManagerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTDeviceManagerApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setDeviceEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api setDeviceEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.clearDeviceEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api clearDeviceEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.isSpeakerphoneOn"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *output = [api isSpeakerphoneOn:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setSpeakerphoneOn"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api setSpeakerphoneOn:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.switchCamera"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api switchCamera:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setCameraZoomFactor"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api setCameraZoomFactor:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.getCameraMaxZoom"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTDoubleValue *output = [api getCameraMaxZoom:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setCameraTorchOn"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api setCameraTorchOn:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setCameraFocusPosition"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetCameraFocusPositionRequest *input = [FLTSetCameraFocusPositionRequest fromMap:message];
        FLTIntValue *output = [api setCameraFocusPosition:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setPlayoutDeviceMute"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api setPlayoutDeviceMute:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.isPlayoutDeviceMute"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *output = [api isPlayoutDeviceMute:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setRecordDeviceMute"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api setRecordDeviceMute:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.isRecordDeviceMute"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *output = [api isRecordDeviceMute:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.enableEarback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTEnableEarbackRequest *input = [FLTEnableEarbackRequest fromMap:message];
        FLTIntValue *output = [api enableEarback:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setEarbackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api setEarbackVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setAudioFocusMode"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api setAudioFocusMode:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void FLTAudioEffectApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTAudioEffectApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.setAudioEffectEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api setAudioEffectEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.clearAudioEffectEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api clearAudioEffectEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.playEffect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTPlayEffectRequest *input = [FLTPlayEffectRequest fromMap:message];
        FLTIntValue *output = [api playEffect:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.stopEffect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api stopEffect:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.stopAllEffects"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api stopAllEffects:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.pauseEffect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api pauseEffect:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.resumeEffect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api resumeEffect:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.pauseAllEffects"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api pauseAllEffects:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.resumeAllEffects"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api resumeAllEffects:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.setEffectSendVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetEffectSendVolumeRequest *input = [FLTSetEffectSendVolumeRequest fromMap:message];
        FLTIntValue *output = [api setEffectSendVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.getEffectSendVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api getEffectSendVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.setEffectPlaybackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetEffectPlaybackVolumeRequest *input = [FLTSetEffectPlaybackVolumeRequest fromMap:message];
        FLTIntValue *output = [api setEffectPlaybackVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.getEffectPlaybackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api getEffectPlaybackVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void FLTEngineApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTEngineApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.create"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTCreateEngineRequest *input = [FLTCreateEngineRequest fromMap:message];
        FLTIntValue *output = [api create:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
    {
        FlutterBasicMessageChannel *channel =
        [FlutterBasicMessageChannel
         messageChannelWithName:@"dev.flutter.pigeon.EngineApi.release"
         binaryMessenger:binaryMessenger];
        if (api) {
            [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
                FlutterError *error;
                [api release:&error withCompletion:^() {
                    FLTIntValue* output = [[FLTIntValue alloc] init];
                    output.value = @(0);
                    callback(wrapResult([output toMap], error));
                }];

            }];
        }
        else {
            [channel setMessageHandler:nil];
        }
    }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setStatsEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api setStatsEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.clearStatsEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api clearStatsEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setChannelProfile"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api setChannelProfile:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.joinChannel"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTJoinChannelRequest *input = [FLTJoinChannelRequest fromMap:message];
        FLTIntValue *output = [api joinChannel:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.leaveChannel"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api leaveChannel:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableLocalAudio"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api enableLocalAudio:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.subscribeRemoteAudioStream"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSubscribeRemoteAudioStreamRequest *input = [FLTSubscribeRemoteAudioStreamRequest fromMap:message];
        FLTIntValue *output = [api subscribeRemoteAudioStream:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.subscribeAllRemoteAudioStreams"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api subscribeAllRemoteAudioStreams:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setAudioProfile"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetAudioProfileRequest *input = [FLTSetAudioProfileRequest fromMap:message];
        FLTIntValue *output = [api setAudioProfile:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableDualStreamMode"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api enableDualStreamMode:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setLocalVideoConfig"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetLocalVideoConfigRequest *input = [FLTSetLocalVideoConfigRequest fromMap:message];
        FLTIntValue *output = [api setLocalVideoConfig:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.startVideoPreview"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api startVideoPreview:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.stopVideoPreview"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api stopVideoPreview:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableLocalVideo"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api enableLocalVideo:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.startScreenCapture"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api startScreenCapture:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.stopScreenCapture"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api stopScreenCapture:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.subscribeRemoteVideoStream"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSubscribeRemoteVideoStreamRequest *input = [FLTSubscribeRemoteVideoStreamRequest fromMap:message];
        FLTIntValue *output = [api subscribeRemoteVideoStream:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.muteLocalAudioStream"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api muteLocalAudioStream:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.muteLocalVideoStream"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolValue *input = [FLTBoolValue fromMap:message];
        FLTIntValue *output = [api muteLocalVideoStream:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.startAudioDump"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api startAudioDump:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.stopAudioDump"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *output = [api stopAudioDump:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableAudioVolumeIndication"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTEnableAudioVolumeIndicationRequest *input = [FLTEnableAudioVolumeIndicationRequest fromMap:message];
        FLTIntValue *output = [api enableAudioVolumeIndication:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.adjustRecordingSignalVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api adjustRecordingSignalVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.adjustPlaybackSignalVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIntValue *input = [FLTIntValue fromMap:message];
        FLTIntValue *output = [api adjustPlaybackSignalVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.addLiveStreamTask"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTAddOrUpdateLiveStreamTaskRequest *input = [FLTAddOrUpdateLiveStreamTaskRequest fromMap:message];
        FLTIntValue *output = [api addLiveStreamTask:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.updateLiveStreamTask"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTAddOrUpdateLiveStreamTaskRequest *input = [FLTAddOrUpdateLiveStreamTaskRequest fromMap:message];
        FLTIntValue *output = [api updateLiveStreamTask:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.removeLiveStreamTask"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTDeleteLiveStreamTaskRequest *input = [FLTDeleteLiveStreamTaskRequest fromMap:message];
        FLTIntValue *output = [api removeLiveStreamTask:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
