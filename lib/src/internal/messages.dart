// Autogenerated from Pigeon (v0.1.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'package:flutter/services.dart';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

class IntValue {
  int value;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }
  // ignore: unused_element
  static IntValue _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final IntValue result = IntValue();
    result.value = pigeonMap['value'];
    return result;
  }
}

class CreateEngineRequest {
  String appKey;
  String logDir;
  int logLevel;
  bool autoSubscribeAudio;
  int videoEncodeMode;
  int videoDecodeMode;
  bool serverRecordAudio;
  bool serverRecordVideo;
  int serverRecordMode;
  bool serverRecordSpeaker;
  bool publishSelfStream;
  int videoSendMode;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['appKey'] = appKey;
    pigeonMap['logDir'] = logDir;
    pigeonMap['logLevel'] = logLevel;
    pigeonMap['autoSubscribeAudio'] = autoSubscribeAudio;
    pigeonMap['videoEncodeMode'] = videoEncodeMode;
    pigeonMap['videoDecodeMode'] = videoDecodeMode;
    pigeonMap['serverRecordAudio'] = serverRecordAudio;
    pigeonMap['serverRecordVideo'] = serverRecordVideo;
    pigeonMap['serverRecordMode'] = serverRecordMode;
    pigeonMap['serverRecordSpeaker'] = serverRecordSpeaker;
    pigeonMap['publishSelfStream'] = publishSelfStream;
    pigeonMap['videoSendMode'] = videoSendMode;
    return pigeonMap;
  }
  // ignore: unused_element
  static CreateEngineRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final CreateEngineRequest result = CreateEngineRequest();
    result.appKey = pigeonMap['appKey'];
    result.logDir = pigeonMap['logDir'];
    result.logLevel = pigeonMap['logLevel'];
    result.autoSubscribeAudio = pigeonMap['autoSubscribeAudio'];
    result.videoEncodeMode = pigeonMap['videoEncodeMode'];
    result.videoDecodeMode = pigeonMap['videoDecodeMode'];
    result.serverRecordAudio = pigeonMap['serverRecordAudio'];
    result.serverRecordVideo = pigeonMap['serverRecordVideo'];
    result.serverRecordMode = pigeonMap['serverRecordMode'];
    result.serverRecordSpeaker = pigeonMap['serverRecordSpeaker'];
    result.publishSelfStream = pigeonMap['publishSelfStream'];
    result.videoSendMode = pigeonMap['videoSendMode'];
    return result;
  }
}

class JoinChannelRequest {
  String token;
  String channelName;
  int uid;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['token'] = token;
    pigeonMap['channelName'] = channelName;
    pigeonMap['uid'] = uid;
    return pigeonMap;
  }
  // ignore: unused_element
  static JoinChannelRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final JoinChannelRequest result = JoinChannelRequest();
    result.token = pigeonMap['token'];
    result.channelName = pigeonMap['channelName'];
    result.uid = pigeonMap['uid'];
    return result;
  }
}

class BoolValue {
  bool value;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }
  // ignore: unused_element
  static BoolValue _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final BoolValue result = BoolValue();
    result.value = pigeonMap['value'];
    return result;
  }
}

class SubscribeRemoteAudioStreamRequest {
  int uid;
  bool subscribe;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['uid'] = uid;
    pigeonMap['subscribe'] = subscribe;
    return pigeonMap;
  }
  // ignore: unused_element
  static SubscribeRemoteAudioStreamRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SubscribeRemoteAudioStreamRequest result = SubscribeRemoteAudioStreamRequest();
    result.uid = pigeonMap['uid'];
    result.subscribe = pigeonMap['subscribe'];
    return result;
  }
}

class SetAudioProfileRequest {
  int profile;
  int scenario;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['profile'] = profile;
    pigeonMap['scenario'] = scenario;
    return pigeonMap;
  }
  // ignore: unused_element
  static SetAudioProfileRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SetAudioProfileRequest result = SetAudioProfileRequest();
    result.profile = pigeonMap['profile'];
    result.scenario = pigeonMap['scenario'];
    return result;
  }
}

class SetLocalVideoConfigRequest {
  int videoProfile;
  int videoCropMode;
  bool frontCamera;
  int frameRate;
  int minFrameRate;
  int bitrate;
  int minBitrate;
  int degradationPrefer;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['videoProfile'] = videoProfile;
    pigeonMap['videoCropMode'] = videoCropMode;
    pigeonMap['frontCamera'] = frontCamera;
    pigeonMap['frameRate'] = frameRate;
    pigeonMap['minFrameRate'] = minFrameRate;
    pigeonMap['bitrate'] = bitrate;
    pigeonMap['minBitrate'] = minBitrate;
    pigeonMap['degradationPrefer'] = degradationPrefer;
    return pigeonMap;
  }
  // ignore: unused_element
  static SetLocalVideoConfigRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SetLocalVideoConfigRequest result = SetLocalVideoConfigRequest();
    result.videoProfile = pigeonMap['videoProfile'];
    result.videoCropMode = pigeonMap['videoCropMode'];
    result.frontCamera = pigeonMap['frontCamera'];
    result.frameRate = pigeonMap['frameRate'];
    result.minFrameRate = pigeonMap['minFrameRate'];
    result.bitrate = pigeonMap['bitrate'];
    result.minBitrate = pigeonMap['minBitrate'];
    result.degradationPrefer = pigeonMap['degradationPrefer'];
    return result;
  }
}

class SubscribeRemoteVideoStreamRequest {
  int uid;
  int streamType;
  bool subscribe;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['uid'] = uid;
    pigeonMap['streamType'] = streamType;
    pigeonMap['subscribe'] = subscribe;
    return pigeonMap;
  }
  // ignore: unused_element
  static SubscribeRemoteVideoStreamRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SubscribeRemoteVideoStreamRequest result = SubscribeRemoteVideoStreamRequest();
    result.uid = pigeonMap['uid'];
    result.streamType = pigeonMap['streamType'];
    result.subscribe = pigeonMap['subscribe'];
    return result;
  }
}

class EnableAudioVolumeIndicationRequest {
  bool enable;
  int interval;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['enable'] = enable;
    pigeonMap['interval'] = interval;
    return pigeonMap;
  }
  // ignore: unused_element
  static EnableAudioVolumeIndicationRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final EnableAudioVolumeIndicationRequest result = EnableAudioVolumeIndicationRequest();
    result.enable = pigeonMap['enable'];
    result.interval = pigeonMap['interval'];
    return result;
  }
}

class DoubleValue {
  double value;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }
  // ignore: unused_element
  static DoubleValue _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final DoubleValue result = DoubleValue();
    result.value = pigeonMap['value'];
    return result;
  }
}

class SetCameraFocusPositionRequest {
  double x;
  double y;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['x'] = x;
    pigeonMap['y'] = y;
    return pigeonMap;
  }
  // ignore: unused_element
  static SetCameraFocusPositionRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SetCameraFocusPositionRequest result = SetCameraFocusPositionRequest();
    result.x = pigeonMap['x'];
    result.y = pigeonMap['y'];
    return result;
  }
}

class EnableEarbackRequest {
  bool enabled;
  int volume;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['enabled'] = enabled;
    pigeonMap['volume'] = volume;
    return pigeonMap;
  }
  // ignore: unused_element
  static EnableEarbackRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final EnableEarbackRequest result = EnableEarbackRequest();
    result.enabled = pigeonMap['enabled'];
    result.volume = pigeonMap['volume'];
    return result;
  }
}

class StartAudioMixingRequest {
  String path;
  int loopCount;
  bool sendEnabled;
  int sendVolume;
  bool playbackEnabled;
  int playbackVolume;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['path'] = path;
    pigeonMap['loopCount'] = loopCount;
    pigeonMap['sendEnabled'] = sendEnabled;
    pigeonMap['sendVolume'] = sendVolume;
    pigeonMap['playbackEnabled'] = playbackEnabled;
    pigeonMap['playbackVolume'] = playbackVolume;
    return pigeonMap;
  }
  // ignore: unused_element
  static StartAudioMixingRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final StartAudioMixingRequest result = StartAudioMixingRequest();
    result.path = pigeonMap['path'];
    result.loopCount = pigeonMap['loopCount'];
    result.sendEnabled = pigeonMap['sendEnabled'];
    result.sendVolume = pigeonMap['sendVolume'];
    result.playbackEnabled = pigeonMap['playbackEnabled'];
    result.playbackVolume = pigeonMap['playbackVolume'];
    return result;
  }
}

class PlayEffectRequest {
  int effectId;
  String path;
  int loopCount;
  bool sendEnabled;
  int sendVolume;
  bool playbackEnabled;
  int playbackVolume;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['effectId'] = effectId;
    pigeonMap['path'] = path;
    pigeonMap['loopCount'] = loopCount;
    pigeonMap['sendEnabled'] = sendEnabled;
    pigeonMap['sendVolume'] = sendVolume;
    pigeonMap['playbackEnabled'] = playbackEnabled;
    pigeonMap['playbackVolume'] = playbackVolume;
    return pigeonMap;
  }
  // ignore: unused_element
  static PlayEffectRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final PlayEffectRequest result = PlayEffectRequest();
    result.effectId = pigeonMap['effectId'];
    result.path = pigeonMap['path'];
    result.loopCount = pigeonMap['loopCount'];
    result.sendEnabled = pigeonMap['sendEnabled'];
    result.sendVolume = pigeonMap['sendVolume'];
    result.playbackEnabled = pigeonMap['playbackEnabled'];
    result.playbackVolume = pigeonMap['playbackVolume'];
    return result;
  }
}

class SetEffectSendVolumeRequest {
  int effectId;
  int volume;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['effectId'] = effectId;
    pigeonMap['volume'] = volume;
    return pigeonMap;
  }
  // ignore: unused_element
  static SetEffectSendVolumeRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SetEffectSendVolumeRequest result = SetEffectSendVolumeRequest();
    result.effectId = pigeonMap['effectId'];
    result.volume = pigeonMap['volume'];
    return result;
  }
}

class SetEffectPlaybackVolumeRequest {
  int effectId;
  int volume;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['effectId'] = effectId;
    pigeonMap['volume'] = volume;
    return pigeonMap;
  }
  // ignore: unused_element
  static SetEffectPlaybackVolumeRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SetEffectPlaybackVolumeRequest result = SetEffectPlaybackVolumeRequest();
    result.effectId = pigeonMap['effectId'];
    result.volume = pigeonMap['volume'];
    return result;
  }
}

class SetupRemoteVideoRendererRequest {
  int uid;
  int textureId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['uid'] = uid;
    pigeonMap['textureId'] = textureId;
    return pigeonMap;
  }
  // ignore: unused_element
  static SetupRemoteVideoRendererRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SetupRemoteVideoRendererRequest result = SetupRemoteVideoRendererRequest();
    result.uid = pigeonMap['uid'];
    result.textureId = pigeonMap['textureId'];
    return result;
  }
}

class EngineApi {
  Future<IntValue> create(CreateEngineRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.create', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> release() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.release', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setStatsEventCallback() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.setStatsEventCallback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> clearStatsEventCallback() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.clearStatsEventCallback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setChannelProfile(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.setChannelProfile', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> joinChannel(JoinChannelRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.joinChannel', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> leaveChannel() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.leaveChannel', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> enableLocalAudio(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.enableLocalAudio', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> subscribeRemoteAudioStream(SubscribeRemoteAudioStreamRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.subscribeRemoteAudioStream', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> subscribeAllRemoteAudioStreams(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.subscribeAllRemoteAudioStreams', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setAudioProfile(SetAudioProfileRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.setAudioProfile', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> enableDualStreamMode(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.enableDualStreamMode', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setLocalVideoConfig(SetLocalVideoConfigRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.setLocalVideoConfig', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> startVideoPreview() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.startVideoPreview', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> stopVideoPreview() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.stopVideoPreview', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> enableLocalVideo(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.enableLocalVideo', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> startScreenCapture(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.startScreenCapture', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> stopScreenCapture() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.stopScreenCapture', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> subscribeRemoteVideoStream(SubscribeRemoteVideoStreamRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.subscribeRemoteVideoStream', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> muteLocalAudioStream(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.muteLocalAudioStream', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> muteLocalVideoStream(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.muteLocalVideoStream', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> startAudioDump() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.startAudioDump', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> stopAudioDump() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.stopAudioDump', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> enableAudioVolumeIndication(EnableAudioVolumeIndicationRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.enableAudioVolumeIndication', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> adjustRecordingSignalVolume(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.adjustRecordingSignalVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> adjustPlaybackSignalVolume(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.EngineApi.adjustPlaybackSignalVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
}

class DeviceManagerApi {
  Future<IntValue> setDeviceEventCallback() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setDeviceEventCallback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> clearDeviceEventCallback() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.clearDeviceEventCallback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<BoolValue> isSpeakerphoneOn() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.isSpeakerphoneOn', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return BoolValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setSpeakerphoneOn(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setSpeakerphoneOn', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> switchCamera() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.switchCamera', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setCameraZoomFactor(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setCameraZoomFactor', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<DoubleValue> getCameraMaxZoom() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.getCameraMaxZoom', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return DoubleValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setCameraTorchOn(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setCameraTorchOn', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setCameraFocusPosition(SetCameraFocusPositionRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setCameraFocusPosition', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setPlayoutDeviceMute(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setPlayoutDeviceMute', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<BoolValue> isPlayoutDeviceMute() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.isPlayoutDeviceMute', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return BoolValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setRecordDeviceMute(BoolValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setRecordDeviceMute', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<BoolValue> isRecordDeviceMute() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.isRecordDeviceMute', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return BoolValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> enableEarback(EnableEarbackRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.enableEarback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setEarbackVolume(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setEarbackVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setAudioFocusMode(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.DeviceManagerApi.setAudioFocusMode', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
}

class AudioMixingApi {
  Future<IntValue> setAudioMixingEventCallback() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.setAudioMixingEventCallback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> clearAudioMixingEventCallback() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.clearAudioMixingEventCallback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> startAudioMixing(StartAudioMixingRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.startAudioMixing', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> stopAudioMixing() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.stopAudioMixing', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> pauseAudioMixing() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.pauseAudioMixing', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> resumeAudioMixing() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.resumeAudioMixing', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setAudioMixingSendVolume(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.setAudioMixingSendVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> getAudioMixingSendVolume() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.getAudioMixingSendVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setAudioMixingPlaybackVolume(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.setAudioMixingPlaybackVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> getAudioMixingPlaybackVolume() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.getAudioMixingPlaybackVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> getAudioMixingDuration() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.getAudioMixingDuration', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> getAudioMixingCurrentPosition() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.getAudioMixingCurrentPosition', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setAudioMixingPosition(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioMixingApi.setAudioMixingPosition', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
}

class AudioEffectApi {
  Future<IntValue> setAudioEffectEventCallback() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.setAudioEffectEventCallback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> clearAudioEffectEventCallback() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.clearAudioEffectEventCallback', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> playEffect(PlayEffectRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.playEffect', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> stopEffect(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.stopEffect', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> stopAllEffects() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.stopAllEffects', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> pauseEffect(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.pauseEffect', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> resumeEffect(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.resumeEffect', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> pauseAllEffects() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.pauseAllEffects', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> resumeAllEffects() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.resumeAllEffects', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setEffectSendVolume(SetEffectSendVolumeRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.setEffectSendVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> getEffectSendVolume(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.getEffectSendVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setEffectPlaybackVolume(SetEffectPlaybackVolumeRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.setEffectPlaybackVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> getEffectPlaybackVolume(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AudioEffectApi.getEffectPlaybackVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
}

class VideoRendererApi {
  Future<IntValue> createVideoRenderer() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VideoRendererApi.createVideoRenderer', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setupLocalVideoRenderer(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VideoRendererApi.setupLocalVideoRenderer', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<IntValue> setupRemoteVideoRenderer(SetupRemoteVideoRendererRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VideoRendererApi.setupRemoteVideoRenderer', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IntValue._fromMap(replyMap['result']);
    }
    
  }
  Future<void> disposeVideoRenderer(IntValue arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VideoRendererApi.disposeVideoRenderer', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
}

